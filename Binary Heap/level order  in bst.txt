Node* constructBst(int a[], int n)
{
    // Code here
    queue<Node*>ql;
    queue<Node*>qr;
    Node*root = new Node(a[0]);
    Node*p=root;
    queue<Node*>q;
    q.push(root);
    int val=q.front()->data;
   
    int count=1;
    int i=1;
    if(a[i]>val)
    {
       
        Node*curr0=new Node(a[i]);
        
    qr.push(curr0);
    q.push(curr0);
    p->right=curr0;
    
    i++;
    }
    else if(a[i]<val){
        Node*curr0=new Node(a[i]);
        
    ql.push(curr0);
    q.push(curr0);
    p->left=curr0;
    
    i++;
    if(a[i]>val)
    {
        Node*curr1=new Node(a[i]);
        
    qr.push(curr1);
    q.push(curr1);
    p->right=curr1;
   
    i++;
    }
    
    
    }
    
     else
    i++;
    
    qr.push(NULL);
    ql.push(NULL);
    
   int w=0;
    for(;i<n;)
    {
        
        if(count%2==1)
        {
             Node*curr=ql.front();
             ql.pop();
            while(curr!=NULL)
            {
           
            if(a[i]<val)
            {
                if(a[i]<curr->data && curr->left==NULL)
                {
                    Node*f = new Node(a[i]);
                    curr->left=f;
                    ql.push(f);
                    q.push(f);
                    i++;
                }
                
                
            }
            
            if(a[i]<val)
            {
                 if(a[i]>curr->data && curr->right==NULL)
                {
                    Node*f = new Node(a[i]);
                    curr->right=f;
                    ql.push(f);
                    q.push(f);
                    i++;
                }
            }
            
            if(a[i]==val || curr->data==a[i])
            i++;
            
            curr=ql.front();
            ql.pop();
            }
            ql.push(NULL);
            count++;
            
        }
        
        
        else{
             
        
             Node*curr=qr.front();
             qr.pop();
            while(curr!=NULL)
            {
           
            if(a[i]>val)
            {
                if(a[i]<curr->data && curr->left==NULL)
                {
                    Node*f = new Node(a[i]);
                    curr->left=f;
                    qr.push(f);
                    q.push(f);
                    i++;
                }
                
                
            }
            
            if(a[i]>val)
            {
                 if(a[i]>curr->data && curr->right==NULL)
                {
                    Node*f = new Node(a[i]);
                    curr->right=f;
                    qr.push(f);
                    q.push(f);
                    i++;
                }
            }
            
            if(a[i]==val || a[i]==curr->data)
            i++;
            
            curr=qr.front();
            qr.pop();
            }
            qr.push(NULL);
            count++;
            
        
        }
        
        
    }
    return root;
}
