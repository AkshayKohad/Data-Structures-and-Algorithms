class Solution
{
    public:
    //comparison function defined for the priority queue.
    struct compare 
    { 
        bool operator()(pair<int, int> p1, pair<int, int> p2) 
        { 
        	//if frequencies of two elements are same 
        	//then the larger number should come first. 
        	if (p1.second == p2.second) 
        		return p1.first < p2.first; 
        		
        	//inserting elements in the priority queue on the basis of 
        	//decreasing order of frequencies.	 
        	return p1.second < p2.second;	 
        } 
    }; 
    
    //Function to return the sum of frequencies of k numbers
    //with most occurrences in an array.
    int kMostFrequent(int arr[], int n, int k) 
    { 
        // unordered_map implemented as frequency hash table. 
        unordered_map<int, int> um;
        for (int i = 0; i<n; i++) 
        	um[arr[i]]++; 
        
        //storing the elements of map in a list.	 
        vector<pair<int, int> > freq_arr(um.begin(), um.end()); 
        
        
        //priority queue implemented as Maxheap on the basis of the 
        //comparison operator "compare".
        //element with the highest frequency is the root of priority queue. 
        //in case of conflicts, larger element is the root.
        priority_queue<pair<int, int>, vector<pair<int, int> >, 
        					compare> pq(um.begin(), um.end()); 
        
        
        int ans = 0;
        //storing the sum of frequencies of first k most occurring elements.
        for (int i = 1; i <= k; i++) 
        { 
            //adding the top element from priority queue in sum and popping it.
        	ans += pq.top().second;
        	pq.pop(); 
        }
        
        //returning the result.
        return ans;			 
    } 
};
